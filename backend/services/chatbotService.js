// services/chatbotService.js
const productService = require('./productService');
const Conversation = require('../models/conversationModel');

class ChatbotService {
  // Mesajƒ± i≈üle ve yanƒ±t olu≈ütur
  async processMessage(message, userId = null) {
    try {
      // Mesajƒ± normalize et
      const normalizedMessage = message.toLowerCase().trim();
      
      // Intent belirleme
      const intent = this.detectIntent(normalizedMessage);
      
      // Intent'e g√∂re yanƒ±t olu≈ütur
      let response;
      switch (intent) {
        case 'greeting':
          response = await this.handleGreeting();
          break;
        case 'product_search':
          response = await this.handleProductSearch(normalizedMessage);
          break;
        case 'product_list':
          response = await this.handleProductList();
          break;
        case 'popular_products':
          response = await this.handlePopularProducts();
          break;
        case 'new_products':
          response = await this.handleNewProducts();
          break;
        case 'help':
          response = await this.handleHelp();
          break;
        case 'order_status':
          response = await this.handleOrderStatus(userId);
          break;
        default:
          response = await this.handleUnknown();
      }

      // Konu≈ümayƒ± kaydet
      if (userId) {
        await this.saveConversation(userId, message, response);
      }

      return response;
    } catch (error) {
      console.error('Chatbot mesaj i≈üleme hatasƒ±:', error);
      return {
        type: 'error',
        message: '√úzg√ºn√ºm, bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin.'
      };
    }
  }

  // Intent belirleme
  detectIntent(message) {
    const intents = {
      greeting: ['merhaba', 'selam', 'g√ºnaydƒ±n', 'iyi g√ºnler', 'hey', 'hello', 'hi'],
      product_list: ['√ºr√ºnler', '√ºr√ºnleri g√∂ster', '√ºr√ºn listesi', 'ne satƒ±yorsunuz'],
      popular_products: ['pop√ºler', 'en √ßok satan', 'trend', 'beƒüenilen'],
      new_products: ['yeni √ºr√ºn', 'yeni gelen', 'son √ºr√ºnler'],
      help: ['yardƒ±m', 'nasƒ±l', 'bilgi', 'destek', 'help'],
      order_status: ['sipari≈ü', 'kargo', 'durum', 'nerede']
    };

    // Intent e≈üle≈ütirme
    for (const [intent, keywords] of Object.entries(intents)) {
      if (keywords.some(keyword => message.includes(keyword))) {
        return intent;
      }
    }

    // √úr√ºn aramasƒ± i√ßin kontrol
    if (message.length > 2) {
      return 'product_search';
    }

    return 'unknown';
  }

  // Selamlama yanƒ±tƒ±
  async handleGreeting() {
    const greetings = [
      'Merhaba! Size nasƒ±l yardƒ±mcƒ± olabilirim? üòä',
      'Ho≈ü geldiniz! √úr√ºnlerimizi g√∂rmek ister misiniz?',
      'Merhaba! Bug√ºn hangi √ºr√ºnle ilgileniyorsunuz?'
    ];

    return {
      type: 'text',
      message: greetings[Math.floor(Math.random() * greetings.length)],
      quickReplies: [
        { text: '√úr√ºnleri G√∂ster', action: 'show_products' },
        { text: 'Pop√ºler √úr√ºnler', action: 'popular_products' },
        { text: 'Yardƒ±m', action: 'help' }
      ]
    };
  }

  // √úr√ºn arama yanƒ±tƒ±
  async handleProductSearch(message) {
    const products = await productService.searchProducts(message, 6);

    if (products.length === 0) {
      return {
        type: 'text',
        message: `"${message}" ile ilgili √ºr√ºn bulunamadƒ±. Ba≈üka bir ≈üey aramak ister misiniz?`,
        quickReplies: [
          { text: 'T√ºm √úr√ºnler', action: 'show_products' },
          { text: 'Pop√ºler √úr√ºnler', action: 'popular_products' }
        ]
      };
    }

    return {
      type: 'product_list',
      message: `"${message}" ile ilgili ${products.length} √ºr√ºn bulundu:`,
      products: products.map(product => ({
        id: product._id,
        name: product.name,
        price: product.price,
        image: product.imageUrl,
        description: product.description,
        inStock: product.inStock
      }))
    };
  }

  // T√ºm √ºr√ºnleri listele
  async handleProductList() {
    const { products } = await productService.getAllProducts({}, 1, 8);

    return {
      type: 'product_list',
      message: 'ƒ∞≈üte √ºr√ºnlerimiz:',
      products: products.map(product => ({
        id: product._id,
        name: product.name,
        price: product.price,
        image: product.imageUrl,
        description: product.description,
        inStock: product.inStock
      })),
      hasMore: true
    };
  }

  // Pop√ºler √ºr√ºnler
  async handlePopularProducts() {
    const products = await productService.getPopularProducts(6);

    return {
      type: 'product_list',
      message: 'En pop√ºler √ºr√ºnlerimiz:',
      products: products.map(product => ({
        id: product._id,
        name: product.name,
        price: product.price,
        image: product.imageUrl,
        rating: product.rating,
        soldCount: product.soldCount
      }))
    };
  }

  // Yeni √ºr√ºnler
  async handleNewProducts() {
    const products = await productService.getNewProducts(6);

    return {
      type: 'product_list',
      message: 'En yeni √ºr√ºnlerimiz:',
      products: products.map(product => ({
        id: product._id,
        name: product.name,
        price: product.price,
        image: product.imageUrl,
        isNew: true
      }))
    };
  }

  // Yardƒ±m yanƒ±tƒ±
  async handleHelp() {
    return {
      type: 'text',
      message: `Size ≈üu konularda yardƒ±mcƒ± olabilirim:
      
üõçÔ∏è √úr√ºn arama - ƒ∞stediƒüiniz √ºr√ºn√º yazƒ±n
üì¶ √úr√ºn listesi - "√úr√ºnleri g√∂ster" yazƒ±n
‚≠ê Pop√ºler √ºr√ºnler - "Pop√ºler √ºr√ºnler" yazƒ±n
üÜï Yeni √ºr√ºnler - "Yeni √ºr√ºnler" yazƒ±n
üìã Sipari≈ü durumu - "Sipari≈ü durumu" yazƒ±n
      
Ba≈üka bir sorunuz varsa yazabilirsiniz!`,
      quickReplies: [
        { text: '√úr√ºnleri G√∂ster', action: 'show_products' },
        { text: 'Pop√ºler √úr√ºnler', action: 'popular_products' }
      ]
    };
  }

  // Sipari≈ü durumu
  async handleOrderStatus(userId) {
    if (!userId) {
      return {
        type: 'text',
        message: 'Sipari≈ü durumunu g√∂rebilmek i√ßin l√ºtfen giri≈ü yapƒ±n.',
        quickReplies: [
          { text: 'Giri≈ü Yap', action: 'login' },
          { text: '√úr√ºnleri G√∂ster', action: 'show_products' }
        ]
      };
    }

    // Bu kƒ±sƒ±m orderService entegrasyonu ile geni≈ületilebilir
    return {
      type: 'text',
      message: 'Sipari≈ü durumunuzu kontrol etmek i√ßin sipari≈ü numaranƒ±zƒ± yazƒ±n veya profil sayfanƒ±zƒ± ziyaret edin.',
      quickReplies: [
        { text: 'Profilim', action: 'profile' },
        { text: '√úr√ºnleri G√∂ster', action: 'show_products' }
      ]
    };
  }

  // Bilinmeyen komut
  async handleUnknown() {
    return {
      type: 'text',
      message: '√úzg√ºn√ºm, ne demek istediƒüinizi anlayamadƒ±m. Size nasƒ±l yardƒ±mcƒ± olabilirim?',
      quickReplies: [
        { text: '√úr√ºnleri G√∂ster', action: 'show_products' },
        { text: 'Yardƒ±m', action: 'help' }
      ]
    };
  }

  // Konu≈üma ge√ßmi≈üini kaydet
  async saveConversation(userId, userMessage, botResponse) {
    try {
      let conversation = await Conversation.findOne({ user: userId });

      if (!conversation) {
        conversation = new Conversation({ user: userId, messages: [] });
      }

      // Kullanƒ±cƒ± mesajƒ±
      conversation.messages.push({
        sender: 'user',
        message: userMessage,
        timestamp: new Date()
      });

      // Bot yanƒ±tƒ±
      conversation.messages.push({
        sender: 'bot',
        message: botResponse.message,
        type: botResponse.type,
        timestamp: new Date()
      });

      // Son 50 mesajƒ± tut
      if (conversation.messages.length > 50) {
        conversation.messages = conversation.messages.slice(-50);
      }

      conversation.lastActivity = new Date();
      await conversation.save();
    } catch (error) {
      console.error('Konu≈üma kaydetme hatasƒ±:', error);
    }
  }

  // Kullanƒ±cƒ± konu≈üma ge√ßmi≈üini getir
  async getUserConversation(userId) {
    try {
      const conversation = await Conversation.findOne({ user: userId })
        .select('messages lastActivity');

      return conversation || { messages: [] };
    } catch (error) {
      throw new Error(`Konu≈üma ge√ßmi≈üi getirilirken hata: ${error.message}`);
    }
  }

  // Konu≈üma ge√ßmi≈üini temizle
  async clearConversation(userId) {
    try {
      await Conversation.findOneAndUpdate(
        { user: userId },
        { messages: [], lastActivity: new Date() },
        { upsert: true }
      );

      return { message: 'Konu≈üma ge√ßmi≈üi temizlendi' };
    } catch (error) {
      throw new Error(`Konu≈üma ge√ßmi≈üi temizlenirken hata: ${error.message}`);
    }
  }
}

module.exports = new ChatbotService();